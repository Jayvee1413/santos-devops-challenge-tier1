from aws_cdk import aws_iam as iam
from aws_cdk.aws_iam import PolicyStatement, Effect


def generate_pipeline_policy(scope):
    return iam.Policy(scope=scope,
                      id="JVSANTOSPipelinePolicy",
                      policy_name="JVSANTOS-pipeline-policy",
                      statements=[
                          PolicyStatement(
                              actions=["iam:PassRole"],
                              effect=Effect.ALLOW,
                              resources=["*"],
                              conditions={"StringEquals":
                                  {"PassedToService": [
                                      "cloudformation.amazonaws.com",
                                      "elasticbeanstalk.amazonaws.com",
                                      "ec2.amazonaws.com",
                                      "ecs-tasks.amazonaws.com"
                                  ]}}
                          ),
                          PolicyStatement(
                              actions=["codestar-connections:UseConnection"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["codedeploy:CreateDeployment",
                                       "codedeploy:GetApplication",
                                       "codedeploy:GetApplicationRevision",
                                       "codedeploy:GetDeployment",
                                       "codedeploy:GetDeploymentConfig",
                                       "codedeploy:RegisterApplicationRevision"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["elasticbeanstalk:*",
                                       "ec2:*",
                                       "elasticloadbalancing:*",
                                       "autoscaling:*",
                                       "cloudwatch:*",
                                       "s3:*",
                                       "sns:*",
                                       "cloudformation:*",
                                       "rds:*",
                                       "sqs:*",
                                       "ecs:*"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["lambda:InvokeFunction",
                                       "lambda:ListFunctions"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["cloudformation:CreateStack",
                                       "cloudformation:DeleteStack",
                                       "cloudformation:DescribeStacks",
                                       "cloudformation:UpdateStack",
                                       "cloudformation:CreateChangeSet",
                                       "cloudformation:DeleteChangeSet",
                                       "cloudformation:DescribeChangeSet",
                                       "cloudformation:ExecuteChangeSet",
                                       "cloudformation:SetStackPolicy",
                                       "cloudformation:ValidateTemplate"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["codebuild:BatchGetBuilds",
                                       "codebuild:StartBuild",
                                       "codebuild:BatchGetBuildBatches",
                                       "codebuild:StartBuildBatch"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["devicefarm:ListProjects",
                                       "devicefarm:ListDevicePools",
                                       "devicefarm:GetRun",
                                       "devicefarm:GetUpload",
                                       "devicefarm:CreateUpload",
                                       "devicefarm:ScheduleRun"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["servicecatalog:ListProvisioningArtifacts",
                                       "servicecatalog:CreateProvisioningArtifact",
                                       "servicecatalog:DescribeProvisioningArtifact",
                                       "servicecatalog:DeleteProvisioningArtifact",
                                       "servicecatalog:UpdateProduct"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["cloudformation:ValidateTemplate"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["states:DescribeExecution",
                                       "states:DescribeStateMachine",
                                       "states:StartExecution"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["appconfig:StartDeployment",
                                       "appconfig:StopDeployment",
                                       "appconfig:GetDeployment"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),
                          PolicyStatement(
                              actions=["ecr:DescribeImages"],
                              effect=Effect.ALLOW,
                              resources=["*"]
                          ),

                      ])


def generate_codebuild_policy(scope, db_secret_arn):
    return iam.Policy(scope=scope,
                      id="JVSANTOSTier1CodebuildPolicy",
                      policy_name="JVSANTOS-codebuild-policy",
                      statements=[
                          PolicyStatement(
                              actions=["secretsmanager:GetSecretValue"],
                              resources=[db_secret_arn],
                              effect=Effect.ALLOW
                          ),
                          PolicyStatement(
                              actions=["logs:CreateLogGroup",
                                       "logs:CreateLogStream",
                                       "logs:PutLogEvents"],
                              resources=["*"],
                              effect=Effect.ALLOW
                          ),
                          PolicyStatement(
                              actions=["codebuild:CreateReportGroup",
                                       "codebuild:CreateReport",
                                       "codebuild:UpdateReport",
                                       "codebuild:BatchPutTestCases",
                                       "codebuild:BatchPutCodeCoverages"],
                              resources=["*"],
                              effect=Effect.ALLOW
                          ),
                          PolicyStatement(
                              actions=["s3:GetObject*",
                                       "s3:GetBucket*",
                                       "s3:List*",
                                       "s3:DeleteObject*",
                                       "s3:PutObject",
                                       "s3:Abort*"],
                              resources=["*"],
                              effect=Effect.ALLOW
                          ),
                          PolicyStatement(
                              actions=["codestar-connections:UseConnection"],
                              resources=["*"],
                              effect=Effect.ALLOW
                          )
                      ])
